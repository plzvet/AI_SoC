import cv2
import numpy as np
import os
from glob import glob

weights_path = 'yolov3-tiny.weights'
cfg_path     = 'yolov3-tiny.cfg'
names_path   = 'coco.names'

net    = cv2.dnn.readNet(weights_path, cfg_path)
layer_names = net.getLayerNames()
out_layers  = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

with open(names_path, 'r') as f:
    classes = [line.strip() for line in f]

def detect_and_show_static(img_path):
    img = cv2.imread(img_path)
    if img is None:
        print(f"Failed to load {img_path}")
        return

    window = 'Image Detection'
    cv2.namedWindow(window)
    cv2.createTrackbar('Confidence %', window, 50, 100, lambda x: None)

    while True:
        thresh = cv2.getTrackbarPos('Confidence %', window) / 100.0
        display = img.copy()

        blob = cv2.dnn.blobFromImage(display, 1/255.0, (320,320), swapRB=True, crop=False)
        net.setInput(blob)
        outs = net.forward(out_layers)

        h, w = display.shape[:2]
        boxes, confidences, class_ids = [], [], []

        for out in outs:
            for det in out:
                scores = det[5:]
                class_id = int(np.argmax(scores))
                conf = scores[class_id]
                if conf > 0.01:
                    cx, cy, bw, bh = det[0:4] * np.array([w, h, w, h])
                    x = int(cx - bw/2)
                    y = int(cy - bh/2)
                    boxes.append([x, y, int(bw), int(bh)])
                    confidences.append(float(conf))
                    class_ids.append(class_id)

        idxs = cv2.dnn.NMSBoxes(boxes, confidences, 0.01, 0.4)

        if len(idxs) > 0:
            for i in idxs.flatten():
                if confidences[i] >= thresh:
                    x, y, wb, hb = boxes[i]
                    label = f"{classes[class_ids[i]]}: {confidences[i]:.2f}"
                    cv2.rectangle(display, (x, y), (x+wb, y+hb), (0,255,0), 2)
                    cv2.putText(display, label, (x, y-5),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,255,0), 1)

        cv2.imshow(window, display)
        key = cv2.waitKey(30) & 0xFF
        if key == 27:   # ESC
            break
        elif key == ord('n'):
            break

    cv2.destroyWindow(window)

img_files = glob(os.path.expanduser('~/Pictures/*.[jp][pn]g'))
for img_path in img_files:
    print("Showing:", img_path)
    detect_and_show_static(img_path)

def webcam_detection():
    window = 'WebCam Detection'
    cv2.namedWindow(window)
    cv2.createTrackbar('Confidence %', window, 50, 100, lambda x: None)

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Webcam open failed")
        return

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        thresh = cv2.getTrackbarPos('Confidence %', window) / 100.0
        blob = cv2.dnn.blobFromImage(frame, 1/255.0, (320,320), swapRB=True, crop=False)
        net.setInput(blob)
        outs = net.forward(out_layers)

        h, w = frame.shape[:2]
        boxes, confidences, class_ids = [], [], []

        for out in outs:
            for det in out:
                scores = det[5:]
                class_id = int(np.argmax(scores))
                conf = scores[class_id]
                if conf > thresh:
                    cx, cy, bw, bh = det[0:4] * np.array([w, h, w, h])
                    x = int(cx - bw/2)
                    y = int(cy - bh/2)
                    boxes.append([x, y, int(bw), int(hb)])
                    confidences.append(float(conf))
                    class_ids.append(class_id)

        idxs = cv2.dnn.NMSBoxes(boxes, confidences, thresh, 0.4)
        if len(idxs) > 0:
            for i in idxs.flatten():
                x, y, wb, hb = boxes[i]
                label = f"{classes[class_ids[i]]}: {confidences[i]:.2f}"
                cv2.rectangle(frame, (x, y), (x+wb, y+hb), (255,0,0), 2)
                cv2.putText(frame, label, (x, y-5),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,0,0), 1)

        cv2.imshow(window, frame)
        if cv2.waitKey(1) & 0xFF == 27:
            break

    cap.release()
    cv2.destroyAllWindows()

webcam_detection()
